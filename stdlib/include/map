#ifndef MAP_H
#define MAP_H

// Use std as the default namespace.
#ifndef NMSP
#define NMSP std
#endif /* NMSP */

#include <stddef.h>

#include <functional>
#include <initializer_list>
#include <iterator>
#include <memory>
#include <rbtree>
#include <utility>

namespace NMSP {

namespace helper {

/**
    Functor class for performing comparisons on key-value pairs and
    combinations of keys and key-values pairs.

    @param Key Type to be compared.
    @param T Mapped type.
    @param Compare Functor for comparing keys.
 */
template <class Key, class T, class Compare = less<Key>>
class pair_compare : public Compare {
public:
    /** Type of a return from the comparison. */
    using result_type = bool;
    /** Type of the first argument in the comparison. */
    using first_argument_type = pair<const Key, T>;
    /** Type of the second argument in the comparison. */
    using second_argument_type = pair<const Key, T>;

    /**
        Compares two value types using their keys.

        @return True if the first operand's key compares less than the
                second operand's.
     */
    result_type operator()(const pair<const Key, T>& lhs,
        const pair<const Key, T>& rhs) const
    {
        return Compare::operator()(lhs.first, rhs.first);
    }

    /**
        Compares the key of a value type against a key type. Not in the
        standard, but useful nonetheless.

        @return True if the first operand's key compares less than the
                second operand's, false otherwise.
     */
    result_type operator()(const Key& lhs, const pair<const Key, T>& rhs) const
    {
        return Compare::operator()(lhs, rhs.first);
    }
    result_type operator()(const pair<const Key, T>& lhs, const Key& rhs) const
    {
        return Compare::operator()(lhs.first, rhs);
    }

    using Compare::operator();

    /**
        Constructor. Initialises the base o the provided value. Deliberately
        implicit to allow easy conversion from key comparators to value
        comparators.

        @param c Comparator to use.
     */
    pair_compare(Compare c) : Compare{c} {}

    /**
        Default constructor. Default constructs the base.
     */
    pair_compare() : Compare{} {}
};

} // helper namespace

/**
    A sorted associaive container with key-value pairs with unique keys. Search,
    removal and insertion operations have logarithmic complexity.

    @param Key Type used for keys.
    @param T Type used for values.
    @param Compare Type used to compare keys for sorting.
    @param Allocator Type used for memory allocation.
 */
template <typename Key, typename T, typename Compare = less<Key>,
    typename Allocator = allocator<pair<const Key, T>>>
class map :
    public helper::rb_tree<pair<const Key, T>,
        helper::pair_compare<Key, T, Compare>,
        Key,
        Allocator>
{
public:
    /**
        Functor class for performing comparisons on key-value pairs and
        combinations of keys and key-values pairs.
     */
    class value_compare : public helper::pair_compare<Key, T, Compare>
    {
    protected:
        // Base type.
        using base = helper::pair_compare<Key, T, Compare>;
        // Make the constructors protected.
        value_compare(Compare c) : base{c} {}
        value_compare() : base{} {}
        // map needs access to the protected constructors.
        friend map;
    };

private:
    // Type of the base rb_tree.
    using tree_type = helper::rb_tree<pair<const Key, T>,
                      helper::pair_compare<Key, T, Compare>,
                      Key,
                      Allocator>;
public:
    /** Type used for values. */
    using mapped_type = T;
    /** Type of a key. */
    using key_type = typename tree_type::key_type;
    /** Type of a value. */
    using value_type = typename tree_type::value_type;
    /** Comparator for comparing key values. */
    using key_compare = Compare;
    /** Type of a reference to a key-value pair. */
    using reference = typename tree_type::reference;
    /** Type of a const reference to a key-value pair. */
    using const_reference = typename tree_type::const_reference;
    /** Type of a pointer to a value. */
    using pointer = typename tree_type::pointer;
    /** Type of a const pointer to a value. */
    using const_pointer = typename tree_type::const_pointer;
    /** Type of an iterator. */
    using iterator = typename tree_type::iterator;
    /** Type of a const iterator. */
    using const_iterator = typename tree_type::const_iterator;
    /** Type of a reverse iterator. */
    using reverse_iterator = typename tree_type::reverse_iterator;
    /** Type of a const reverse iterator. */
    using const_reverse_iterator = typename tree_type::const_reverse_iterator;
    /** Allocator type. */
    using allocator_type = typename tree_type::allocator_type;

    // Use all base constructors.
    using tree_type::tree_type;
    // GCC pre version 7 does not inherit the default constructor via using.
    map() : tree_type{} {}

    /**
        Constructs a container with the provided comparator and allocator and
        fills it with copies of elements in the range specified by first and
        last. The iterators specifying the range must be at least Input
        Iterators.

        @param first, last Iterators specifying the range to copy.
        @param comp Comparator to use.
        @param alloc Allocator to use.
     */
    template <typename Iter, typename = helper::RequireInputIter<Iter>>
    map(Iter first, Iter last, const key_compare& comp = value_compare{},
        const allocator_type& alloc = allocator_type{}) :
        tree_type{comp, alloc}
    {
        for (; first != last; ++first)
            insert(*first);
    }

    /**
        Constructs a container with the provided allocator and the default
        comparator and fills it with copies of elements in the range specified
        by first and last. The iterators specifying the range must be at least
        Input Iterators.

        @param first, last Iterators specifying the range to copy.
        @param alloc Allocator to use.
     */
    template <typename Iter, typename = helper::RequireInputIter<Iter>>
    map(Iter first, Iter last, const allocator_type& alloc) :
        tree_type{key_compare{}, alloc}
    {
        for (; first != last; ++first)
            insert(*first);
    }

    /**
        Constructs a container with the provided comparator and allocator and
        fills it with copies of elements in the provided initialiser list.

        @param init Initialiser list containing elements to copy.
        @param comp Comparator to use.
        @param alloc Allocator to use.
     */
    map(std::initializer_list<value_type> init,
        const key_compare& comp = value_compare{},
        const allocator_type& alloc = allocator_type{}) :
        tree_type{comp, alloc}
    {
        for (const value_type& v : init)
            insert(v);
    }

    /**
        Constructs a container with the provided allocator and the default
        comparator and fills it with copies of elements in the provided
        initialiser list.

        @param init Initialiser list containing elements to copy.
        @param alloc Allocator to use.
     */
    map(std::initializer_list<value_type> init, const allocator_type& alloc) :
        tree_type{key_compare{}, alloc}
    {
        for (const value_type& v : init)
            insert(v);
    }

    /**
        Assigns copies of the elements in the initialiser list to replace the
        contents of the map.

        @param ilist Initialiser list with the elements to create. If multiple
               elements with the same key are present, the standard does not
               specify which is inserted. This implementation will insert the
               first in the list.
     */
    map& operator=(std::initializer_list<value_type> ilist)
    {
        tree_type::clear();

        for (const value_type& v : ilist)
            insert(v);

        return *this;        
    }          

    /**
        Gives a reference to the value mapped by the provided key. Inserts the
        key if it does not already exist, mapping to the default value.

        @param key Key to look up or create.
        @return Value mapped by key.

        TODO If I ever get round to making tuple, this needs to be adjusted.
     */
    mapped_type& operator[](const Key& key)
    {
        return (*insert(value_type {key, mapped_type{}}).first).second;
    }

    mapped_type& operator[](Key&& key)
    {
        return (*insert(value_type {move(key), mapped_type{}}).first).second;
    }

    // We need to respecify insert so we can check for duplicates. Apparently,
    // making a function called insert will automatically hide all inserts from
    // the base class from outsiders.

    /**
        Inserts a single value. The data is copied, constructed from the
        provided value if the appropriate constructor exists, or is moved.

        @param d Data for the new node.
        @return A pair with the second value a boolean indicating whether the
                insert succeeded. The first value is an iterator to the new
                value if the insert succeeded, or an iterator to the value with
                the same key if it did not.
     */
    pair<iterator, bool> insert(const value_type& d)
    {
        // Check whether the key already exists.
        iterator it = tree_type::find(d.first);
        if (it != tree_type::end())
            return pair<iterator, bool>(it, false);
        // Insert new value.
        return pair<iterator, bool>{tree_type::insert(d), true};
    }

    template <typename P, typename =
        typename enable_if<is_constructible<value_type, P&&>::value>::type>
    pair<iterator, bool> insert(P&& d)
    {
        // Construct the element. Necessary for checking whether it exists.
        value_type temp {forward<P>(d)};
        // Check whether the key already exists.
        iterator it = tree_type::find(temp.first);
        if (it != tree_type::end())
            return pair<iterator, bool>(it, false);
        // Insert new value. The new element will be moved from temp to
        // allocator assigned storage. I don't see a good way round this.
        return pair<iterator, bool>{tree_type::insert(move(temp)), true};
    }

    pair<iterator, bool> insert(value_type&& d)
    {
        // Check whether the key already exists.
        iterator it = tree_type::find(d.first);
        if (it != tree_type::end())
            return pair<iterator, bool>(it, false);
        // Insert new value.
        return pair<iterator, bool>{tree_type::insert(forward<value_type>(d)),
            true};
    }

    /**
        Inserts a single value. The data is copied, constructed from the
        provided value if the appropriate constructor exists, or is moved. The
        hint provides a position to attempt to position the node at. The
        complexitiy is amortised constant if the element can be inserted just
        before the indicated position. If not, a normal logarithmic insertion
        takes place.

        @param hint Position to initially attempt insertion.
        @param d Data for the new node.
        @return A pair with the second value a boolean indicating whether the
                insert succeeded. The first value is an iterator to the new
                value if the insert succeeded, or an iterator to the value with
                the same key if it did not.
     */
    iterator insert(const_iterator hint, const value_type& d)
    {
        // Check whether the hint is good.
        if (tree_type::check_insert_hint(hint, d) != nullptr)
        {
            // If the hint is good, we only need to check the hint and one
            // before it for identical keys. This is complicated by the
            // possibility that hint might be begin() or end(). It's simplified
            // by check_insert_hint() returning nullptr if it's both begin() and
            // end().
            const_iterator hint_copy = hint;
            bool ok_hint = false;
            if (hint_copy == tree_type::end())
                ok_hint = true;
            else if (tree_type::comp(d, *hint_copy))
                ok_hint = true;

            bool ok_before = false;
            if (hint_copy == tree_type::begin())
                ok_before = true;
            else if (tree_type::comp(*--hint_copy, d))
                ok_before = true;

            if (ok_hint && ok_before)
                return tree_type::insert(hint, d);
            else if (!ok_hint)
                return iterator{tree_type::get_current(hint), this};
            else
                return iterator{tree_type::get_current(--hint), this};
        }

        // The hint is not good, so insertion is logarithmic anyway. Just call
        // the normal insert.
        return insert(d).first;
    }

    template <typename P, typename =
        typename enable_if<is_constructible<value_type, P&&>::value>::type>
    iterator insert(const_iterator hint, P&& d)
    {
        // Construct the element. Necessary for checking whether it exists.
        value_type temp {forward<P>(d)};
        // Check whether the hint is good.
        if (tree_type::check_insert_hint(hint, temp) != nullptr)
        {
            // If the hint is good, we only need to check the hint and one
            // before it for identical keys. This is complicated by the
            // possibility that hint might be begin() or end(). It's simplified
            // by check_insert_hint() returning nullptr if it's both begin() and
            // end().
            const_iterator hint_copy = hint;
            bool ok_hint = false;
            if (hint_copy == tree_type::end())
                ok_hint = true;
            else if (tree_type::comp(temp, *hint_copy))
                ok_hint = true;

            bool ok_before = false;
            if (hint_copy == tree_type::begin())
                ok_before = true;
            else if (tree_type::comp(*--hint_copy, temp))
                ok_before = true;

            if (ok_hint && ok_before)
                // Insert new value. The new element will be moved from temp to
                // allocator assigned storage. I don't see a good way round
                // this.
                return tree_type::insert(hint, move(temp));
            else if (!ok_hint)
                return iterator{tree_type::get_current(hint), this};
            else
                return iterator{tree_type::get_current(--hint), this};
        }

        // The hint is not good, so insertion is logarithmic anyway. Just call
        // the normal insert.
        return insert(move(temp)).first;
    }

    iterator insert(const_iterator hint, value_type&& d)
    {
        // Check whether the hint is good.
        if (tree_type::check_insert_hint(hint, d) != nullptr)
        {
            // If the hint is good, we only need to check the hint and one
            // before it for identical keys. This is complicated by the
            // possibility that hint might be begin() or end(). It's simplified
            // by check_insert_hint() returning nullptr if it's both begin() and
            // end().
            const_iterator hint_copy = hint;
            bool ok_hint = false;
            if (hint_copy == tree_type::end())
                ok_hint = true;
            else if (tree_type::comp(d, *hint_copy))
                ok_hint = true;

            bool ok_before = false;
            if (hint_copy == tree_type::begin())
                ok_before = true;
            else if (tree_type::comp(*--hint_copy, d))
                ok_before = true;

            if (ok_hint && ok_before)
                return tree_type::insert(hint, forward<value_type>(d));
            else if (!ok_hint)
                return iterator{tree_type::get_current(hint), this};
            else
                return iterator{tree_type::get_current(--hint), this};
        }

        // The hint is not good, so insertion is logarithmic anyway. Just call
        // the normal insert.
        return insert(forward<value_type>(d)).first;
    }

    /**
        Inserts the values in the range specified by first and last, which must
        be at least Input Iterators. Any new values which duplicate keys will be
        silently dropped. If there are multiple copies of the same key in the
        range, the standard does not specify which will be inserted. This
        implementation will insert the first in the range.

        @param first, last Iterators specifying the range to copy.
     */
    template <typename Iter, typename = helper::RequireInputIter<Iter>>
    void insert(Iter first, Iter last)
    {
        for (; first != last; ++first)
            insert(*first);
    }

    /**
        Inserts the values contained in the initialiser list. Any new values
        which duplicate keys will be silently dropped. If there are multiple
        copies of the same key in the range, the standard does not specify which
        will be inserted. This implementation will insert the first in the list.

        @param ilist List of values to insert.
     */
    void insert(std::initializer_list<value_type> ilist)
    {
        for (const value_type& v : ilist)
            insert(v);
    }

    /**
        Constructs an new node from the given arguments and inserts it into the
        tree if the key does not already exist.

        @param args Set of arguments that will be passed to the data
               constructor.
        @return A pair with the second value a boolean indicating whether the
                insert succeeded. The first value is an iterator to the new
                value if the insert succeeded, or an iterator to the value with
                the same key if it did not.
     */
    template <typename... Args>
    pair<iterator, bool> emplace(Args&&... args)
    {
        // Construct the node. Necessary for checking whether it exists.
        typename tree_type::node_type* new_node =
            tree_type::node_traits::allocate(tree_type::node_alloc, 1);
        tree_type::node_traits::construct(tree_type::node_alloc, new_node,
            nullptr, helper::tree_red, tree_type::comp, tree_type::alloc,
            forward<Args>(args)...);

        // Check whether the key already exists.
        iterator it = tree_type::find(new_node->get_data().first);
        if (it != tree_type::end())
        {
            tree_type::node_traits::destroy(tree_type::node_alloc, new_node);
            tree_type::node_traits::deallocate(tree_type::node_alloc, new_node,
                1);
            return pair<iterator, bool>(it, false);
        }
        // Insert new value. The new element will be moved from temp to
        // allocator assigned storage. I don't see a good way round this.
        return pair<iterator, bool>{tree_type::insert_impl(new_node), true};
    }

    /**
        Constructs an new node from the given arguments and inserts it into the
        tree if the key does not already exist.  The hint provides a position
        to attempt to position the node at. The complexitiy is amortised
        constant if the element can be inserted just before the indicated
        position. If not, a normal logarithmic insertion takes place.

        @param hint Position to initially attempt insertion.
        @param args Set of arguments that will be passed to the data
               constructor.
        @return A pair with the second value a boolean indicating whether the
                insert succeeded. The first value is an iterator to the new
                value if the insert succeeded, or an iterator to the value with
                the same key if it did not.
     */
    template <typename... Args>
    iterator emplace_hint(const_iterator hint, Args&&... args)
    {
        // Construct the node. Necessary for checking whether it exists.
        typename tree_type::node_type* new_node =
            tree_type::node_traits::allocate(tree_type::node_alloc, 1);
        tree_type::node_traits::construct(tree_type::node_alloc, new_node,
            nullptr, helper::tree_red, tree_type::comp, tree_type::alloc,
            forward<Args>(args)...);
        // Check whether the hint is good.
        if (tree_type::check_insert_hint(hint, new_node->get_data()) != nullptr)
        {
            // If the hint is good, we only need to check the hint and one
            // before it for identical keys. This is complicated by the
            // possibility that hint might be begin() or end(). It's simplified
            // by check_insert_hint() returning nullptr if it's both begin() and
            // end().
            const_iterator hint_copy = hint;
            bool ok_hint = false;
            if (hint_copy == tree_type::end())
                ok_hint = true;
            else if (tree_type::comp(new_node->get_data(), *hint_copy))
                ok_hint = true;

            bool ok_before = false;
            if (hint_copy == tree_type::begin())
                ok_before = true;
            else if (tree_type::comp(*--hint_copy, new_node->get_data()))
                ok_before = true;

            if (!ok_hint || !ok_before)
            {
                // Duplicate, so free memory.
                tree_type::node_traits::destroy(tree_type::node_alloc,
                    new_node);
                tree_type::node_traits::deallocate(tree_type::node_alloc,
                    new_node, 1);
            }

            if (ok_hint && ok_before)
                return tree_type::insert_hint_impl(hint, new_node);
            else if (!ok_hint)
                return iterator{tree_type::get_current(hint), this};
            else
                return iterator{tree_type::get_current(--hint), this};
        }

        // The hint is not good, so insertion is logarithmic anyway. Just do
        // the normal emplace.
        // Check whether the key already exists.
        iterator it = tree_type::find(new_node->get_data().first);
        if (it != tree_type::end())
        {
            tree_type::node_traits::destroy(tree_type::node_alloc, new_node);
            tree_type::node_traits::deallocate(tree_type::node_alloc, new_node,
                1);
            return it;
        }
        // Insert new value. The new element will be moved from temp to
        // allocator assigned storage. I don't see a good way round this.
        return tree_type::insert_impl(new_node);
    }

    /**
        Returns the comparator used to compare keys.

        @return Comparator for comparing keys.
     */
    key_compare key_comp() const
    {
        // Up cast the pair_compare to a key_compare.
        return tree_type::value_comp();
    }

    /**
        Returns the comparator used to compare values.

        @return Comparator for comparing values.
     */
    value_compare value_comp() const
    {
        // Down cast the pair_compare to a value_compare.
        return tree_type::value_comp();
    }
};

} // NMSP namesapce

#endif /* MAP_H */
