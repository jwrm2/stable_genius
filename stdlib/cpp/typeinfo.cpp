#include "../include/typeinfo"

#include "../include/cxxabi"

/******************************************************************************
 ******************************************************************************/
#ifndef HOSTED_TEST /* Don't try to redefine the compiler's type_info. */
namespace std {

/******************************************************************************
 ******************************************************************************/

type_info::~type_info() {}

/******************************************************************************/

bool type_info::__do_catch(const type_info* throw_type, void**, size_t) const
{
    // Basic type has no base class.
    return (*this == *throw_type);
}

/******************************************************************************/

bool type_info::__do_upcast(const __cxxabiv1::__class_type_info*, void**) const
{
    // Overridden in derived types.
    return false;
}

/******************************************************************************/

bool type_info::__is_function_p() const
{
    // Overridden in derived types.
    return false;
}

/******************************************************************************/

bool type_info::__is_pointer_p() const
{
    // Overridden in derived types.
    return false;
}

/******************************************************************************
 ******************************************************************************/

} // end std namespace
#endif /* HOSTED_TEST */

/******************************************************************************
 ******************************************************************************/

namespace NMSP {

/******************************************************************************
 ******************************************************************************/

bad_typeid::~bad_typeid() noexcept {}

/******************************************************************************/

const char* bad_typeid::what() const noexcept
{
    return "NMSP::bad_typeid";
}

/******************************************************************************
 ******************************************************************************/

bad_cast::~bad_cast() noexcept {}

/******************************************************************************/

const char* bad_cast::what() const noexcept
{
    return "NMSP::bad_cast";
}

/******************************************************************************
 ******************************************************************************/

} // end NMSP namespace

/******************************************************************************
 ******************************************************************************/
